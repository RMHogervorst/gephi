% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/writing_tools.R
\name{gephi_write_nodes}
\alias{gephi_write_nodes}
\alias{gephi_write_edges}
\alias{gephi_write_both}
\title{Write igraph/ tidygraph to a format that gephi can read}
\usage{
gephi_write_nodes(graph, path, na = "", verbose = TRUE)

gephi_write_edges(graph, path, na = "", verbose = TRUE)

gephi_write_both(graph, pathedges, pathnodes, na = "", verbose = TRUE)
}
\arguments{
\item{graph}{The igraph or tidygraph object your work  with}

\item{path}{the file where to save to e.g.: edges.csv or data/edges.csv}

\item{na}{How to record missing values, defaults to "", nothing}

\item{verbose}{by default these functions are chatty and will tell you what they do if you do not want that, set to FALSE}

\item{pathedges}{where to save the edges file e.g.: 'edges.csv'}

\item{pathnodes}{where to save the nodes file e.g.: 'nodes.csv'}
}
\value{
invisible original object
}
\description{
write_nodes will write the nodes, and write_edges will write
the edges to a csv file. You will alway want to use the write_edges
function, the write nodes function has only added value if the nodes
have attributes, such as Label, Age, color etc.
}
\details{
If the file is not an igraph / tidygraph object, but a dataframe
you could use the write_*_from_df functions. This function will
assume the edges are between the first and second column, but you can
specify if that is not the case.
}
\section{Functions}{
\itemize{
\item \code{gephi_write_edges}: Write nodes data to csv

\item \code{gephi_write_both}: Write both node and edge data away
}}

